/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as FoldersFolderNameImport } from './routes/folders.$folderName'
import { Route as FeedsFeedIdImport } from './routes/feeds.$feedId'
import { Route as ArticlesArticleIdImport } from './routes/articles.$articleId'

// Create Virtual Routes

const TodayLazyImport = createFileRoute('/today')()
const ReadlaterLazyImport = createFileRoute('/read_later')()
const NewfeedLazyImport = createFileRoute('/new_feed')()
const ConfigurationsLazyImport = createFileRoute('/configurations')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TodayLazyRoute = TodayLazyImport.update({
  id: '/today',
  path: '/today',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/today.lazy').then((d) => d.Route))

const ReadlaterLazyRoute = ReadlaterLazyImport.update({
  id: '/read_later',
  path: '/read_later',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/read_later.lazy').then((d) => d.Route))

const NewfeedLazyRoute = NewfeedLazyImport.update({
  id: '/new_feed',
  path: '/new_feed',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/new_feed.lazy').then((d) => d.Route))

const ConfigurationsLazyRoute = ConfigurationsLazyImport.update({
  id: '/configurations',
  path: '/configurations',
  getParentRoute: () => rootRoute,
} as any).lazy(() =>
  import('./routes/configurations.lazy').then((d) => d.Route),
)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const FoldersFolderNameRoute = FoldersFolderNameImport.update({
  id: '/folders/$folderName',
  path: '/folders/$folderName',
  getParentRoute: () => rootRoute,
} as any)

const FeedsFeedIdRoute = FeedsFeedIdImport.update({
  id: '/feeds/$feedId',
  path: '/feeds/$feedId',
  getParentRoute: () => rootRoute,
} as any)

const ArticlesArticleIdRoute = ArticlesArticleIdImport.update({
  id: '/articles/$articleId',
  path: '/articles/$articleId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/configurations': {
      id: '/configurations'
      path: '/configurations'
      fullPath: '/configurations'
      preLoaderRoute: typeof ConfigurationsLazyImport
      parentRoute: typeof rootRoute
    }
    '/new_feed': {
      id: '/new_feed'
      path: '/new_feed'
      fullPath: '/new_feed'
      preLoaderRoute: typeof NewfeedLazyImport
      parentRoute: typeof rootRoute
    }
    '/read_later': {
      id: '/read_later'
      path: '/read_later'
      fullPath: '/read_later'
      preLoaderRoute: typeof ReadlaterLazyImport
      parentRoute: typeof rootRoute
    }
    '/today': {
      id: '/today'
      path: '/today'
      fullPath: '/today'
      preLoaderRoute: typeof TodayLazyImport
      parentRoute: typeof rootRoute
    }
    '/articles/$articleId': {
      id: '/articles/$articleId'
      path: '/articles/$articleId'
      fullPath: '/articles/$articleId'
      preLoaderRoute: typeof ArticlesArticleIdImport
      parentRoute: typeof rootRoute
    }
    '/feeds/$feedId': {
      id: '/feeds/$feedId'
      path: '/feeds/$feedId'
      fullPath: '/feeds/$feedId'
      preLoaderRoute: typeof FeedsFeedIdImport
      parentRoute: typeof rootRoute
    }
    '/folders/$folderName': {
      id: '/folders/$folderName'
      path: '/folders/$folderName'
      fullPath: '/folders/$folderName'
      preLoaderRoute: typeof FoldersFolderNameImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/configurations': typeof ConfigurationsLazyRoute
  '/new_feed': typeof NewfeedLazyRoute
  '/read_later': typeof ReadlaterLazyRoute
  '/today': typeof TodayLazyRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/feeds/$feedId': typeof FeedsFeedIdRoute
  '/folders/$folderName': typeof FoldersFolderNameRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/configurations': typeof ConfigurationsLazyRoute
  '/new_feed': typeof NewfeedLazyRoute
  '/read_later': typeof ReadlaterLazyRoute
  '/today': typeof TodayLazyRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/feeds/$feedId': typeof FeedsFeedIdRoute
  '/folders/$folderName': typeof FoldersFolderNameRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/configurations': typeof ConfigurationsLazyRoute
  '/new_feed': typeof NewfeedLazyRoute
  '/read_later': typeof ReadlaterLazyRoute
  '/today': typeof TodayLazyRoute
  '/articles/$articleId': typeof ArticlesArticleIdRoute
  '/feeds/$feedId': typeof FeedsFeedIdRoute
  '/folders/$folderName': typeof FoldersFolderNameRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/configurations'
    | '/new_feed'
    | '/read_later'
    | '/today'
    | '/articles/$articleId'
    | '/feeds/$feedId'
    | '/folders/$folderName'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/configurations'
    | '/new_feed'
    | '/read_later'
    | '/today'
    | '/articles/$articleId'
    | '/feeds/$feedId'
    | '/folders/$folderName'
  id:
    | '__root__'
    | '/'
    | '/configurations'
    | '/new_feed'
    | '/read_later'
    | '/today'
    | '/articles/$articleId'
    | '/feeds/$feedId'
    | '/folders/$folderName'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ConfigurationsLazyRoute: typeof ConfigurationsLazyRoute
  NewfeedLazyRoute: typeof NewfeedLazyRoute
  ReadlaterLazyRoute: typeof ReadlaterLazyRoute
  TodayLazyRoute: typeof TodayLazyRoute
  ArticlesArticleIdRoute: typeof ArticlesArticleIdRoute
  FeedsFeedIdRoute: typeof FeedsFeedIdRoute
  FoldersFolderNameRoute: typeof FoldersFolderNameRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ConfigurationsLazyRoute: ConfigurationsLazyRoute,
  NewfeedLazyRoute: NewfeedLazyRoute,
  ReadlaterLazyRoute: ReadlaterLazyRoute,
  TodayLazyRoute: TodayLazyRoute,
  ArticlesArticleIdRoute: ArticlesArticleIdRoute,
  FeedsFeedIdRoute: FeedsFeedIdRoute,
  FoldersFolderNameRoute: FoldersFolderNameRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/configurations",
        "/new_feed",
        "/read_later",
        "/today",
        "/articles/$articleId",
        "/feeds/$feedId",
        "/folders/$folderName"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/configurations": {
      "filePath": "configurations.lazy.tsx"
    },
    "/new_feed": {
      "filePath": "new_feed.lazy.tsx"
    },
    "/read_later": {
      "filePath": "read_later.lazy.tsx"
    },
    "/today": {
      "filePath": "today.lazy.tsx"
    },
    "/articles/$articleId": {
      "filePath": "articles.$articleId.tsx"
    },
    "/feeds/$feedId": {
      "filePath": "feeds.$feedId.tsx"
    },
    "/folders/$folderName": {
      "filePath": "folders.$folderName.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
